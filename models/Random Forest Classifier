import numpy as np
import pandas as pd

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score
from scipy.sparse import hstack
from sklearn.model_selection import train_test_split


//Pre processing
class_names = ['toxic']

train = pd.read_csv('drive/My Drive/Colab Notebooks/ALDA project_Midway/train.csv').fillna(' ')
#test = pd.read_csv('test.csv').fillna(' ')

train_text = train['comment_text']
#test_text = test['comment_text']
#all_text = pd.concat([train_text, test_text])

word_vectorizer = TfidfVectorizer(
    sublinear_tf=True,
    strip_accents='unicode',
    analyzer='word',
    token_pattern=r'\w{1,}',
    stop_words='english',
    ngram_range=(1, 1),
    max_features=10000)
word_vectorizer.fit(train_text)
train_features = word_vectorizer.transform(train_text)
#test_features = word_vectorizer.transform(test_text)
#print(train_features.shape)
#print(test_features.shape)
#scores = []
train_target = train['toxic']
#nrow_train = train.shape[0]
X_train, X_test, Y_train, Y_test = train_test_split( train_features, train_target, test_size=0.2, random_state=42)


// Random Forest Classification Model
from sklearn.ensemble import RandomForestClassifier 
#rfc = RandomForestClassifier(n_estimators=1000, max_leaf_nodes=18, random_state=21)
rfc = RandomForestClassifier(n_estimators=10000, max_leaf_nodes=500, random_state=21)
rfc.fit(X_train, Y_train)


//Printing the Results

from sklearn.metrics import precision_recall_fscore_support
from sklearn.metrics import confusion_matrix, roc_curve, roc_auc_score, classification_report, accuracy_score, precision_recall_fscore_support

predictions = rfc.predict(X_test)

accuracy = accuracy_score(Y_test,predictions)
precision, recall, fscore, support = precision_recall_fscore_support(Y_test,predictions, average = 'weighted')

#print('Train Accuracy -> ', train_accuracy)
print('Accuracy -> ', accuracy)
print('Precision -> ', precision)
print('Recall -> ', recall)
print('F-Score -> ', fscore)
print('Support -> ', support)

print(classification_report(Y_test, predictions))
pd.DataFrame(confusion_matrix(Y_test, predictions),
   index = [['Actual', 'Actual'], ['Not Toxic', 'Toxic']],
   columns = [['Predicted', 'Predicted'], ['Not Toxic', 'Toxic']])
